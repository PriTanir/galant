Bugs that still need to be fixed before freeze:

*** threads

- kruskal messages don’t appear until you backtrack and are not present all the time even then.
[has to do with the way messages are handled; they don’t force an increment state or pause]

- doesn’t seem to be a problem for mce
[because messages are displayed at every step — may be out of sync, however]

- still got message about display state even if algorithm is not running and window failed to respond; this was after using left arrow fast forward; had done that successfully before, however

CODE

in GraphState
	setInitializationComplete() seems odd
		why do an increment; is this not a boolean?

	not sure I understand
		return this != null ? true : false;
	how can ‘this’ be null?

	added setGraph() and getGraph(); may be clear later

in GraphWindow
	why do we need updateStatusLabel that takes a char array instead of a String?

	for now okay, but status information should really be in a different window or the console; the purpose of the graph window is to display the state of the graph and the algorithm; viewer or listener should not be burdened with extraneous info; and the status info is really only for debugging at this point

	the GraphPanel should not really need to know about the GrapWindow, but …
	I guess this is all due to the status bar

in GraphPanel
	not clear that algorithmComplete should live here rather than in GraphState, but no big deal

	algorithm and graph are linked as soon as algorithm execution begins; so algorithm state and graph state are the same

	this.gw.getGraphDispatch().getWorkingGraph().getGraphState().setStepComplete(false);
	don’t need nearly that much indirection, but part of the problem is with GraphDispatch
	GraphDispatch.getInstance().getWorkingGraph()…
	really should be
	GraphDispatch.getWorkingGraph()…
	ultimately, a lot of this should go away if we have a specialized object for each thread; they can be set up to store relevant information about their thread (graphState and algorithm status in one, displayState in the other); it’s sort of happening here with GraphState and GraphPanel objects, but there’s too much other baggage

*** gui:

when editing text, arrow keys no longer work

movement of nodes does not work when algorithm creates nodes, as in binary_tree.alg

*** compiler

global variables don’t get reinitialized if you just push Run instead of Compile and Run; this problem may go away when the right thing is done with threads in the compiler

	 



